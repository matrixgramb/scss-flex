
/**
 * 12 Column Flex Grid
 * 
 * Simple 12 column grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the 
 * understanding that you can pass in whatever you might require for your site.
 *
 * $bp-namespace-obj is a Sass list with nested lists inside. Each sub list defines two things. 
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 * 
 * Note: If the measurement is left out then it will be skipped when generating 
 * the grid and applied to global styles.
 *
 */

// Grid setup
$number-of-columns:			12;
$gutter-width:					18px;

// Map screen sizes
$bp-namespace-obj: (
	(xs),
	(sm, 768),
	(md, 992px),
	(lg, 1200px)
) !default;


/**
 * Column Maths
 */

$half-gutter: 0.5rem;
$half-gutter-adjustment: -$half-gutter;

/**
 * Run the column percent function programatically
 */
@function get-col-percent($column-num) {
	
	$column-width: $column-num / $number-of-columns * 1%;
	
	@return $column-width;
}

// Useful mixins
@mixin horizontal-padding($value) {
	padding-left: $value;
	padding-right: $value;
}

@mixin vertical-padding($value) {
	padding-top: $value;
	padding-bottom: $value;
}

@mixin horizontal-margin($value) {
	margin-left: $value;
	margin-right: $value;
}

@mixin vertical-margin($value) {
	margin-top: $value;
	margin-bottom: $value;
}


/**
 * Row wrapper class, flex box parent.
 */
.row {
	box-sizing: border-box;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	@include horizontal-margin(-$gutter-width / 2);
}


@mixin col {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
	@include horizontal-padding($gutter-width / 2)
}

@mixin col-flex {
	@include col;
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

/**
 * Added extra class to avoid repetition
 * and save file size
 */

.col {
	@include col;
}

/**
 * Generate a set of grid column classes using a namespace
 *
 * .col-[namespace] for intelligent column division
 * .col-[namespace]-[number] for a column that covers a specific number of columns (1-12)
 * .off-[namespace]-[number] for pushing a col a specific number of columns (1-11)
 */

@mixin grid($namespace) {

	.col-#{$namespace} {
		@include col-flex;
	}

	// Run the loop for as many columns as speficied
	@for $i from 1 through $number-of-columns {
		.col-#{$namespace}-#{$i} {
			// used .col class instead of including the styles in each column
			//@include col;
			flex-basis: get-col-percent($i);
			max-width:  get-col-percent($i);
		}
	}

	@for $i from 1 through $number-of-columns {
		
		// Don't include the .off class for the last column
		@if ( $i != $number-of-columns ) {	
		.off-#{$namespace}-#{$i} {
			margin-left: get-col-percent($i);
		}
		}
	}

}


/**
 * Generate the actual grid for each namespace in the $bp-namespace-obj.
 */
@each $val in $bp-namespace-obj {

	@if length($val) == 1 {

		$namespace: nth($val, 1);
		@include grid($namespace);

	} @else {

		$namespace: nth($val, 1);
		$size: nth($val, 2);

		@media only screen and (min-width: #{$size}) {
			@include grid($namespace);
		}

	}

}
